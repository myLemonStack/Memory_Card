{"ast":null,"code":"var _jsxFileName = \"/home/alam/Desktop/code/memory-card/src/components/PokemonGrid.js\",\n  _s = $RefreshSig$();\nimport { useState, useEffect } from \"react\";\nimport Container from \"react-bootstrap/Container\";\nimport Row from \"react-bootstrap/Row\";\nimport Col from \"react-bootstrap/Col\";\nimport PokemonCard from \"./PokemonCard\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction PokemonGrid({\n  pokemons\n}) {\n  _s();\n  const [pokeList, setPokeList] = useState([]);\n  useEffect(() => {\n    setPokeList(pokemons); // Store only the Pokémon data, not JSX elements\n  }, [pokemons]);\n  return /*#__PURE__*/_jsxDEV(Container, {\n    children: pokeList.length === 0 ? /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"...loading Cards\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 18,\n      columnNumber: 9\n    }, this) : pokeList.reduce((rows, pok, index) => {\n      if (index % 5 === 0) {\n        // Every 5 items, start a new row\n        rows.push([]);\n      }\n      rows[rows.length - 1].push(pok); // Add the Pokémon to the last row\n      return rows;\n    }, []).map((row, rowIndex) => /*#__PURE__*/_jsxDEV(Row, {\n      children: row.map((pok, colIndex) => /*#__PURE__*/_jsxDEV(Col, {\n        children: /*#__PURE__*/_jsxDEV(PokemonCard, {\n          name: pok.name,\n          image: pok.image\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 33,\n          columnNumber: 19\n        }, this)\n      }, colIndex, false, {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 17\n      }, this))\n    }, rowIndex, false, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 13\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 16,\n    columnNumber: 5\n  }, this);\n}\n\n// function PokemonGrid({ pokemons }) {\n//   const [pokeCards, setPokeCards] = useState(null);\n\n//   console.log(pokemons);\n//   useEffect(() => {\n//     const myCards = pokemons.map((pok) => (\n//       <PokemonCard name={pok.name} image={pok.image} />\n//     ));\n//     setPokeCards(myCards);\n//   }, [pokemons]);\n\n//   return pokeCards === null ? (\n//     <h2>...loading Cards</h2>\n//   ) : (\n//     <Container>\n//       <Row>\n//         <Col>{pokeCards[0]}</Col>\n//         <Col>{pokeCards[1]}</Col>\n//         <Col>{pokeCards[2]}</Col>\n//         <Col>{pokeCards[3]}</Col>\n//         <Col>{pokeCards[4]}</Col>\n//       </Row>\n//       <Row>\n//         <Col>{pokeCards[5]}</Col>\n//         <Col>{pokeCards[6]}</Col>\n//         <Col>{pokeCards[7]}</Col>\n//         <Col>{pokeCards[8]}</Col>\n//         <Col>{pokeCards[9]}</Col>\n//       </Row>\n//     </Container>\n//   );\n// }\n_s(PokemonGrid, \"wk4peC5re3MfFKSr59GHYH5YRJI=\");\n_c = PokemonGrid;\nexport default PokemonGrid;\nvar _c;\n$RefreshReg$(_c, \"PokemonGrid\");","map":{"version":3,"names":["useState","useEffect","Container","Row","Col","PokemonCard","jsxDEV","_jsxDEV","PokemonGrid","pokemons","_s","pokeList","setPokeList","children","length","fileName","_jsxFileName","lineNumber","columnNumber","reduce","rows","pok","index","push","map","row","rowIndex","colIndex","name","image","_c","$RefreshReg$"],"sources":["/home/alam/Desktop/code/memory-card/src/components/PokemonGrid.js"],"sourcesContent":["import { useState, useEffect } from \"react\";\nimport Container from \"react-bootstrap/Container\";\nimport Row from \"react-bootstrap/Row\";\nimport Col from \"react-bootstrap/Col\";\n\nimport PokemonCard from \"./PokemonCard\";\n\nfunction PokemonGrid({ pokemons }) {\n  const [pokeList, setPokeList] = useState([]);\n\n  useEffect(() => {\n    setPokeList(pokemons); // Store only the Pokémon data, not JSX elements\n  }, [pokemons]);\n\n  return (\n    <Container>\n      {pokeList.length === 0 ? (\n        <h2>...loading Cards</h2>\n      ) : (\n        pokeList\n          .reduce((rows, pok, index) => {\n            if (index % 5 === 0) {\n              // Every 5 items, start a new row\n              rows.push([]);\n            }\n            rows[rows.length - 1].push(pok); // Add the Pokémon to the last row\n            return rows;\n          }, [])\n          .map((row, rowIndex) => (\n            <Row key={rowIndex}>\n              {row.map((pok, colIndex) => (\n                <Col key={colIndex}>\n                  <PokemonCard name={pok.name} image={pok.image} />\n                </Col>\n              ))}\n            </Row>\n          ))\n      )}\n    </Container>\n  );\n}\n\n// function PokemonGrid({ pokemons }) {\n//   const [pokeCards, setPokeCards] = useState(null);\n\n//   console.log(pokemons);\n//   useEffect(() => {\n//     const myCards = pokemons.map((pok) => (\n//       <PokemonCard name={pok.name} image={pok.image} />\n//     ));\n//     setPokeCards(myCards);\n//   }, [pokemons]);\n\n//   return pokeCards === null ? (\n//     <h2>...loading Cards</h2>\n//   ) : (\n//     <Container>\n//       <Row>\n//         <Col>{pokeCards[0]}</Col>\n//         <Col>{pokeCards[1]}</Col>\n//         <Col>{pokeCards[2]}</Col>\n//         <Col>{pokeCards[3]}</Col>\n//         <Col>{pokeCards[4]}</Col>\n//       </Row>\n//       <Row>\n//         <Col>{pokeCards[5]}</Col>\n//         <Col>{pokeCards[6]}</Col>\n//         <Col>{pokeCards[7]}</Col>\n//         <Col>{pokeCards[8]}</Col>\n//         <Col>{pokeCards[9]}</Col>\n//       </Row>\n//     </Container>\n//   );\n// }\n\nexport default PokemonGrid;\n"],"mappings":";;AAAA,SAASA,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAC3C,OAAOC,SAAS,MAAM,2BAA2B;AACjD,OAAOC,GAAG,MAAM,qBAAqB;AACrC,OAAOC,GAAG,MAAM,qBAAqB;AAErC,OAAOC,WAAW,MAAM,eAAe;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAExC,SAASC,WAAWA,CAAC;EAAEC;AAAS,CAAC,EAAE;EAAAC,EAAA;EACjC,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGZ,QAAQ,CAAC,EAAE,CAAC;EAE5CC,SAAS,CAAC,MAAM;IACdW,WAAW,CAACH,QAAQ,CAAC,CAAC,CAAC;EACzB,CAAC,EAAE,CAACA,QAAQ,CAAC,CAAC;EAEd,oBACEF,OAAA,CAACL,SAAS;IAAAW,QAAA,EACPF,QAAQ,CAACG,MAAM,KAAK,CAAC,gBACpBP,OAAA;MAAAM,QAAA,EAAI;IAAgB;MAAAE,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,GAEzBP,QAAQ,CACLQ,MAAM,CAAC,CAACC,IAAI,EAAEC,GAAG,EAAEC,KAAK,KAAK;MAC5B,IAAIA,KAAK,GAAG,CAAC,KAAK,CAAC,EAAE;QACnB;QACAF,IAAI,CAACG,IAAI,CAAC,EAAE,CAAC;MACf;MACAH,IAAI,CAACA,IAAI,CAACN,MAAM,GAAG,CAAC,CAAC,CAACS,IAAI,CAACF,GAAG,CAAC,CAAC,CAAC;MACjC,OAAOD,IAAI;IACb,CAAC,EAAE,EAAE,CAAC,CACLI,GAAG,CAAC,CAACC,GAAG,EAAEC,QAAQ,kBACjBnB,OAAA,CAACJ,GAAG;MAAAU,QAAA,EACDY,GAAG,CAACD,GAAG,CAAC,CAACH,GAAG,EAAEM,QAAQ,kBACrBpB,OAAA,CAACH,GAAG;QAAAS,QAAA,eACFN,OAAA,CAACF,WAAW;UAACuB,IAAI,EAAEP,GAAG,CAACO,IAAK;UAACC,KAAK,EAAER,GAAG,CAACQ;QAAM;UAAAd,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAE;MAAC,GADzCS,QAAQ;QAAAZ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAEb,CACN;IAAC,GALMQ,QAAQ;MAAAX,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAMb,CACN;EACJ;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACQ,CAAC;AAEhB;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAAR,EAAA,CAlESF,WAAW;AAAAsB,EAAA,GAAXtB,WAAW;AAoEpB,eAAeA,WAAW;AAAC,IAAAsB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}